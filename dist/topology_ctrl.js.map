{"version":3,"sources":["../src/topology_ctrl.js"],"names":["MetricsPanelCtrl","_","kbn","rendering","TopologyCtrl","$scope","$injector","$rootScope","panelDefaults","links","datasource","maxDataPoints","interval","targets","cacheTimeout","graph","nodes","edges","minEdgeSize","minNodeSize","edgeType","edgeLabelSize","draggable","trackable","filterMode","showEdgeLabels","varList","edgeWeight","dstNode","srcNode","colorNode","colorMode","colors","thresholds","defaults","panel","events","on","onDataReceived","bind","onDataError","onInitEditMode","onRefresh","loadTemplatingVars","addEditorTab","unitFormats","getUnitFormats","data","render","dataList","thisArg","meta","id","forEach","el","hasOwnProperty","datapoints","it","idx","regex","m","exec","target","parseGraph","scope","elem","attrs","ctrl","str","hash","s","l","i","length","charCodeAt","h","item","findIndex","node","_label","push","label","x","Math","random","y","size","parseInt","color","nameToColor","handleThresholdColor","edge","source","type","hover_color","_type","_idx","_fidx","_lidx","ref","copy","colorIndex","newColor","d","varlist","getFields","text","metricFindQuery","database","measurement","isEqual","datasourceSrv","get","then","load_vars","err","console","log","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,sB,kBAAAA,gB;;AACFC,O;;AACAC,S;;AACAC,e;;;;;;;;;;;;;;;;;;;;;8BAEMC,Y;;;AAEX,8BAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2C;AAAA;;AAAA,kIACnCF,MADmC,EAC3BC,SAD2B;;AAEzC,gBAAKC,UAAL,GAAkBA,UAAlB;AACA,cAAIC,gBAAgB;AAClBC,mBAAO,EADW;AAElBC,wBAAY,IAFM;AAGlBC,2BAAe,CAHG;AAIlBC,sBAAU,IAJQ;AAKlBC,qBAAS,CAAC,EAAD,CALS;AAMlBC,0BAAc,IANI;;AAQlBC,mBAAO;AACLC,qBAAO,EADF;AAELC,qBAAO;AAFF,aARW;AAYlBC,yBAAa,CAZK;AAalBC,yBAAa,CAbK;AAclBC,sBAAU,aAdQ;AAelBC,2BAAe,cAfG;AAgBlBC,uBAAW,KAhBO;AAiBlBC,uBAAW,KAjBO;AAkBlBC,wBAAY,IAlBM;AAmBlBC,4BAAgB,KAnBE;AAoBlBC,qBAAS,EApBS;AAqBlBC,wBAAY,IArBM;AAsBlBC,qBAAS,IAtBS;AAuBlBC,qBAAS,IAvBS;AAwBlBC,uBAAW,IAxBO;;AA0BlBC,uBAAW,IA1BO;AA2BlBC,oBAAQ,CAAC,wBAAD,EAA2B,0BAA3B,EAAuD,yBAAvD,CA3BU;AA4BlBC,wBAAY;AA5BM,WAApB;;AA+BAhC,YAAEiC,QAAF,CAAW,MAAKC,KAAhB,EAAuB3B,aAAvB;;AAEA,gBAAK4B,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKC,cAAL,CAAoBC,IAApB,OAAhC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,YAAf,EAA6B,MAAKG,WAAL,CAAiBD,IAAjB,OAA7B;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,oBAAf,EAAqC,MAAKC,cAAL,CAAoBC,IAApB,OAArC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKI,cAAL,CAAoBF,IAApB,OAAjC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,SAAf,EAA0B,MAAKK,SAAL,CAAeH,IAAf,OAA1B;AAxCyC;AAyC1C;;;;sCAEW;AACV,iBAAKI,kBAAL;AACD;;;2CAEgB;AACf,iBAAKC,YAAL,CAAkB,SAAlB,EAA6B,qDAA7B,EAAoF,CAApF;AACA,iBAAKC,WAAL,GAAmB3C,IAAI4C,cAAJ,EAAnB;AACA,iBAAKH,kBAAL;AACD;;;wCAEa;AACZ,iBAAKI,IAAL,GAAY,EAAZ;AACA,iBAAKhC,KAAL,GAAa,EAAEC,OAAO,EAAT,EAAaC,OAAO,EAApB,EAAb;AACA,iBAAK+B,MAAL;AACD;;;yCAEcC,Q,EAAU;AACvB,gBAAIC,UAAU,IAAd;;AAEA,gBAAIA,QAAQxC,UAAR,CAAmByC,IAAnB,CAAwBC,EAAxB,KAA+B,eAAnC,EAAoD;AAClDH,uBAASI,OAAT,CAAiB,UAACC,EAAD,EAAQ;AACvB,oBAAIA,GAAGC,cAAH,CAAkB,YAAlB,KAAmCD,GAAGE,UAAH,KAAkBN,QAAQH,IAAjE,EAAuE;AACrEG,0BAAQH,IAAR,GAAeO,GAAGE,UAAlB;AACD;AACF,eAJD;AAKD,aAND,MAMO,IAAIN,QAAQxC,UAAR,CAAmByC,IAAnB,CAAwBC,EAAxB,KAA+B,UAAnC,EAA+C;AACpDF,sBAAQH,IAAR,GAAe,EAAf;AACAE,uBAASI,OAAT,CAAiB,UAACC,EAAD,EAAQ;AACvB,oBAAIA,GAAGC,cAAH,CAAkB,YAAlB,CAAJ,EAAqC;AACnCD,qBAAGE,UAAH,CAAcH,OAAd,CAAsB,UAACI,EAAD,EAAIC,GAAJ,EAAY;AAChC,wBAAI,CAACR,QAAQH,IAAR,CAAaW,GAAb,CAAL,EAAwB;AACtBR,8BAAQH,IAAR,CAAaW,GAAb,IAAoB,EAApB;AACD;AACD,wBAAMC,QAAQ,mBAAd;AACA,wBAAMC,IAAID,MAAME,IAAN,CAAWP,GAAGQ,MAAd,CAAV;AACAZ,4BAAQH,IAAR,CAAaW,GAAb,EAAmBE,MAAI,IAAJ,GAASA,EAAE,CAAF,CAAT,GAAcN,GAAGQ,MAApC,IAA+CL,GAAG,CAAH,CAA/C;AACD,mBAPD;AAQD;AACF,eAXD;AAYD;AACDP,oBAAQa,UAAR,CAAmBb,QAAQH,IAA3B;AACAG,oBAAQF,MAAR;AACD;;;+BAEIgB,K,EAAOC,I,EAAMC,K,EAAOC,I,EAAM;AAC7BhE,sBAAU6D,KAAV,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,IAA9B;AACD;;;sCAEWC,G,EAAK;AACf,gBAAIA,GAAJ,EAAS;AACP,kBAAIC,OAAO,CAAX;AAAA,kBAAcC,IAAE,EAAhB;AAAA,kBAAoBC,IAAE,EAAtB;AACA,mBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,IAAIK,MAAxB,EAAgCD,GAAhC,EAAqC;AACnCH,uBAAOD,IAAIM,UAAJ,CAAeF,CAAf,KAAqB,CAACH,QAAQ,CAAT,IAAcA,IAAnC,CAAP;AACD;;AAED,kBAAIM,IAAIN,OAAO,GAAf;AACA,qBAAO,SAAOM,CAAP,GAAS,IAAT,GAAcL,CAAd,GAAgB,KAAhB,GAAsBC,CAAtB,GAAwB,IAA/B;AACD,aARD,MAQO;AACL,qBAAO,SAAP;AACD;AACF;;;qCAEUxB,I,EAAM;AACf,gBAAIG,UAAU,IAAd;;AAEAA,oBAAQf,KAAR,CAAcpB,KAAd,CAAoBC,KAApB,GAA4B,EAA5B;AACAkC,oBAAQf,KAAR,CAAcpB,KAAd,CAAoBE,KAApB,GAA4B,EAA5B;AACAhB,cAAEoD,OAAF,CAAUN,IAAV,EAAgB,UAAC6B,IAAD,EAAU;AACxB,kBAAIlB,MAAMzD,EAAE4E,SAAF,CAAY3B,QAAQf,KAAR,CAAcpB,KAAd,CAAoBC,KAAhC,EAAuC,gBAAQ;AAAE,uBAAO4D,KAAK1B,QAAQf,KAAR,CAAcN,OAAnB,MAAgCiD,KAAK1B,EAA5C;AAAiD,eAAlG,CAAV;AACA,kBAAIM,OAAO,CAAC,CAAZ,EAAe;AACb,oBAAIqB,SAAU7B,QAAQf,KAAR,CAAcL,SAAd,GAAwB8C,KAAK1B,QAAQf,KAAR,CAAcL,SAAnB,IAA8B,IAA9B,GAAmC8C,KAAK1B,QAAQf,KAAR,CAAcN,OAAnB,CAA3D,GAAuF+C,KAAK1B,QAAQf,KAAR,CAAcN,OAAnB,CAArG;AACAqB,wBAAQf,KAAR,CAAcpB,KAAd,CAAoBC,KAApB,CAA0BgE,IAA1B,CAA+B;AAC7B5B,sBAAIwB,KAAK1B,QAAQf,KAAR,CAAcN,OAAnB,CADyB;AAE7BoD,yBAAOF,MAFsB;AAG7BG,qBAAGC,KAAKC,MAAL,EAH0B;AAI7BC,qBAAGF,KAAKC,MAAL,EAJ0B;AAK7BE,wBAAMC,SAASX,KAAK1B,QAAQf,KAAR,CAAcR,UAAnB,CAAT,CALuB;AAM7B6D,yBAAOtC,QAAQuC,WAAR,CAAoBV,MAApB;AANsB,iBAA/B;AAQA7B,wBAAQwC,oBAAR,CAA6B,OAA7B,EAAqChC,GAArC;AACD,eAXD,MAWO;AACLR,wBAAQf,KAAR,CAAcpB,KAAd,CAAoBC,KAApB,CAA0B0C,GAA1B,EAA+B4B,IAA/B,IAAqCC,SAASX,KAAK1B,QAAQf,KAAR,CAAcR,UAAnB,CAAT,CAArC;AACAuB,wBAAQwC,oBAAR,CAA6B,OAA7B,EAAqChC,GAArC;AACD;AACDA,oBAAMzD,EAAE4E,SAAF,CAAY3B,QAAQf,KAAR,CAAcpB,KAAd,CAAoBC,KAAhC,EAAuC,gBAAQ;AAAE,uBAAO4D,KAAK1B,QAAQf,KAAR,CAAcP,OAAnB,MAAgCkD,KAAK1B,EAA5C;AAAiD,eAAlG,CAAN;AACA,kBAAIM,OAAO,CAAC,CAAZ,EAAe;AACb,oBAAIqB,SAAU7B,QAAQf,KAAR,CAAcL,SAAd,GAAwB8C,KAAK1B,QAAQf,KAAR,CAAcL,SAAnB,IAA8B,IAA9B,GAAmC8C,KAAK1B,QAAQf,KAAR,CAAcN,OAAnB,CAA3D,GAAuF+C,KAAK1B,QAAQf,KAAR,CAAcP,OAAnB,CAArG;AACAsB,wBAAQf,KAAR,CAAcpB,KAAd,CAAoBC,KAApB,CAA0BgE,IAA1B,CAA+B;AAC7B5B,sBAAIwB,KAAK1B,QAAQf,KAAR,CAAcP,OAAnB,CADyB;AAE7BqD,yBAAOF,MAFsB;AAG7BG,qBAAGC,KAAKC,MAAL,EAH0B;AAI7BC,qBAAGF,KAAKC,MAAL,EAJ0B;AAK7BE,wBAAMC,SAASX,KAAK1B,QAAQf,KAAR,CAAcR,UAAnB,CAAT,CALuB;AAM7B6D,yBAAOtC,QAAQuC,WAAR,CAAoBV,MAApB;AANsB,iBAA/B;AAQA7B,wBAAQwC,oBAAR,CAA6B,OAA7B,EAAqChC,GAArC;AACD,eAXD,MAWO;AACLR,wBAAQf,KAAR,CAAcpB,KAAd,CAAoBC,KAApB,CAA0B0C,GAA1B,EAA+B4B,IAA/B,IAAqCC,SAASX,KAAK1B,QAAQf,KAAR,CAAcR,UAAnB,CAAT,CAArC;AACAuB,wBAAQwC,oBAAR,CAA6B,OAA7B,EAAqChC,GAArC;AACD;AACDA,oBAAMzD,EAAE4E,SAAF,CAAY3B,QAAQf,KAAR,CAAcpB,KAAd,CAAoBE,KAAhC,EAAuC,gBAAQ;AAAE,uBAAO2D,KAAK1B,QAAQf,KAAR,CAAcN,OAAnB,IAA4B,GAA5B,GAAgC+C,KAAK1B,QAAQf,KAAR,CAAcP,OAAnB,CAAhC,KAAgE+D,KAAKvC,EAA5E;AAAiF,eAAlI,CAAN;AACA,kBAAIM,OAAO,CAAC,CAAZ,EAAe;AACbR,wBAAQf,KAAR,CAAcpB,KAAd,CAAoBE,KAApB,CAA0B+D,IAA1B,CAA+B;AAC7B5B,sBAAIwB,KAAK1B,QAAQf,KAAR,CAAcN,OAAnB,IAA4B,GAA5B,GAAgC+C,KAAK1B,QAAQf,KAAR,CAAcP,OAAnB,CADP;AAE7BgE,0BAAQhB,KAAK1B,QAAQf,KAAR,CAAcN,OAAnB,CAFqB;AAG7BiC,0BAAQc,KAAK1B,QAAQf,KAAR,CAAcP,OAAnB,CAHqB;AAI7BqD,yBAAQ/B,QAAQf,KAAR,CAAcV,cAAd,GAA6ByB,QAAQf,KAAR,CAAcR,UAAd,GAAyB,GAAzB,GAA6B4D,SAASX,KAAK1B,QAAQf,KAAR,CAAcR,UAAnB,CAAT,CAA1D,GAAmG,EAJ9E;AAK7B2D,wBAAMC,SAASX,KAAK1B,QAAQf,KAAR,CAAcR,UAAnB,CAAT,CALuB;AAM7BkE,wBAAM3C,QAAQf,KAAR,CAAcf,QANS;AAO7BoE,yBAAO,MAPsB;AAQ7BM,+BAAa;AARgB,iBAA/B;AAUA5C,wBAAQwC,oBAAR,CAA6B,OAA7B,EAAqChC,GAArC;AACD,eAZD,MAYO;AACLR,wBAAQf,KAAR,CAAcpB,KAAd,CAAoBE,KAApB,CAA0ByC,GAA1B,EAA+B4B,IAA/B,IAAqCC,SAASX,KAAK1B,QAAQf,KAAR,CAAcR,UAAnB,CAAT,CAArC;AACA,oBAAIuB,QAAQf,KAAR,CAAcV,cAAlB,EAAkC;AAChCyB,0BAAQf,KAAR,CAAcpB,KAAd,CAAoBE,KAApB,CAA0ByC,GAA1B,EAA+BuB,KAA/B,GAAqC/B,QAAQf,KAAR,CAAcR,UAAd,GAAyB,GAAzB,GAA6BuB,QAAQf,KAAR,CAAcpB,KAAd,CAAoBE,KAApB,CAA0ByC,GAA1B,EAA+B4B,IAAjG;AACD;AACDpC,wBAAQwC,oBAAR,CAA6B,OAA7B,EAAqChC,GAArC;AACD;AACF,aArDD;AAsDD;;;+CAEoBqC,K,EAAOC,I,EAAM;AAAA;;AAChC,gBAAID,UAAU,KAAK5D,KAAL,CAAWJ,SAArB,IAAkC,KAAKI,KAAL,CAAWF,UAAX,CAAsBwC,MAAtB,GAA+B,CAArE,EAAwE;AACtE,kBAAIwB,QAAQD,QAAQ,CAAC,CAAT,GAAa,KAAK7D,KAAL,CAAWpB,KAAX,CAAiBgF,KAAjB,EAAwBtB,MAAxB,GAA+B,CAA5C,GAAgDuB,IAA5D;AACA,kBAAIE,QAAQ,KAAK/D,KAAL,CAAWF,UAAX,CAAsB4C,SAAtB,CAAgC,UAACvB,EAAD,EAAQ;AAClD,uBAAO,OAAKnB,KAAL,CAAWpB,KAAX,CAAiBgF,KAAjB,EAAwBE,KAAxB,EAA+BX,IAA/B,GAAsChC,EAA7C;AACD,eAFW,CAAZ;AAGA4C,sBAAQA,SAAS,CAAC,CAAV,GAAc,KAAK/D,KAAL,CAAWF,UAAX,CAAsBwC,MAApC,GAA6CyB,KAArD;AACA,mBAAK/D,KAAL,CAAWpB,KAAX,CAAiBgF,KAAjB,EAAwBE,KAAxB,EAA+BT,KAA/B,GAAuC,KAAKrD,KAAL,CAAWH,MAAX,CAAkBkE,KAAlB,CAAvC;AACD;AACF;;;6CAEkB;AACjB,gBAAIC,MAAM,KAAKhE,KAAL,CAAWH,MAArB;AACA,gBAAIoE,OAAOD,IAAI,CAAJ,CAAX;AACAA,gBAAI,CAAJ,IAASA,IAAI,CAAJ,CAAT;AACAA,gBAAI,CAAJ,IAASC,IAAT;AACA,iBAAKpD,MAAL;AACD;;;wCAEaqD,U,EAAY;AACxB,gBAAInD,UAAU,IAAd;AACA,mBAAO,oBAAY;AACjBA,sBAAQf,KAAR,CAAcH,MAAd,CAAqBqE,UAArB,IAAmCC,QAAnC;AACApD,sBAAQF,MAAR;AACD,aAHD;AAID;;;0CAEeM,E,EAAIiD,C,EAAG;AACrB,gBAAIrB,CAAJ;AAAA,gBAAOsB,UAAU,CAAC,EAAD,CAAjB;AACA,gBAAID,EAAEpD,IAAF,CAAOC,EAAP,KAAc,eAAd,IAAiC,OAAOmD,EAAEE,SAAT,KAAuB,UAA5D,EAAwE;AACtEvB,kBAAI,MAAMqB,EAAEE,SAAF,CAAY,EAAZ,CAAV;AACAvB,gBAAE7B,OAAF,CAAU,UAACI,EAAD,EAAQ;AAAE+C,wBAAQxB,IAAR,CAAavB,GAAGiD,IAAhB;AAAwB,eAA5C;AACD,aAHD,MAGO,IAAIH,EAAEpD,IAAF,CAAOC,EAAP,KAAc,UAAlB,EAA8B;AACnC;AACA8B,kBAAI,MAAMqB,EAAEI,eAAF,CAAkB,wBAAsBJ,EAAEK,QAAxB,GAAiC,QAAjC,GAA0CtD,GAAGnB,KAAH,CAAStB,OAAT,CAAiB,CAAjB,EAAoBgG,WAAhF,CAAV;AACA3B,gBAAE7B,OAAF,CAAU,UAACI,EAAD,EAAQ;AAAE+C,wBAAQxB,IAAR,CAAavB,GAAGiD,IAAhB;AAAwB,eAA5C;AACD;AACD,gBAAI,CAACzG,EAAE6G,OAAF,CAAUN,OAAV,EAAmBlD,GAAGnB,KAAH,CAAST,OAA5B,CAAL,EAA2C;AACzC4B,iBAAGnB,KAAH,CAAST,OAAT,GAAmB8E,OAAnB;AACD;AACF;;;+CAEoB;AACnB,gBAAItD,UAAU,IAAd;;AAEA,gBAAIA,QAAQf,KAAR,CAAczB,UAAlB,EAA8B;AAC5BwC,sBAAQ6D,aAAR,CAAsBC,GAAtB,CAA0B9D,QAAQf,KAAR,CAAczB,UAAxC,EAAoDuG,IAApD,CACE,UAASvG,UAAT,EAAqB;AACnBwC,wBAAQgE,SAAR,CAAkBhE,OAAlB,EAA2BxC,UAA3B;AACD,eAFD,CAEE6B,IAFF,CAEOW,OAFP,CADF,EAIE,UAASiE,GAAT,EAAc;AACZC,wBAAQC,GAAR,CAAYF,GAAZ;AACD,eANH;AAQD;AACF;;;;QA/N+BnH,gB;;;;AAkOlCI,mBAAakH,WAAb,GAA2B,aAA3B","file":"topology_ctrl.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport rendering from './rendering';\n\nexport class TopologyCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, $rootScope) {\n    super($scope, $injector);\n    this.$rootScope = $rootScope;\n    var panelDefaults = {\n      links: [],\n      datasource: null,\n      maxDataPoints: 3,\n      interval: null,\n      targets: [{}],\n      cacheTimeout: null,\n\n      graph: {\n        nodes: [],\n        edges: [],\n      },\n      minEdgeSize: 4,\n      minNodeSize: 4,\n      edgeType: 'curvedArrow',\n      edgeLabelSize: 'proportional',\n      draggable: false,\n      trackable: false,\n      filterMode: null,\n      showEdgeLabels: false,\n      varList: [],\n      edgeWeight: null,\n      dstNode: null,\n      srcNode: null,\n      colorNode: null,\n\n      colorMode: null,\n      colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n      thresholds: [],\n    };\n\n    _.defaults(this.panel, panelDefaults);\n\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('refresh', this.onRefresh.bind(this));\n  }\n\n  onRefresh() {\n    this.loadTemplatingVars();\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/gretamosa-topology-panel/editor.html', 2);\n    this.unitFormats = kbn.getUnitFormats();\n    this.loadTemplatingVars();\n  }\n\n  onDataError() {\n    this.data = []; \n    this.graph = { nodes: [], edges: [] };\n    this.render();\n  }\n\n  onDataReceived(dataList) {\n    var thisArg = this;\n\n    if (thisArg.datasource.meta.id === 'elasticsearch') {\n      dataList.forEach((el) => {\n        if (el.hasOwnProperty('datapoints') && el.datapoints !== thisArg.data) {\n          thisArg.data = el.datapoints;\n        }\n      });\n    } else if (thisArg.datasource.meta.id === 'influxdb') {\n      thisArg.data = [];\n      dataList.forEach((el) => {\n        if (el.hasOwnProperty('datapoints')) {\n          el.datapoints.forEach((it,idx) => {\n            if (!thisArg.data[idx]) {\n              thisArg.data[idx] = {};\n            }\n            const regex = /(\\S+)(\\.)(\\S+)/gmi;\n            const m = regex.exec(el.target);\n            thisArg.data[idx][(m!==null?m[3]:el.target)] = it[0];\n          }); \n        }\n      });\n    }\n    thisArg.parseGraph(thisArg.data);\n    thisArg.render();\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n\n  nameToColor(str) {\n    if (str) {\n      var hash = 0, s=30, l=50;\n      for (var i = 0; i < str.length; i++) {\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\n      }\n\n      var h = hash % 360;\n      return 'hsl('+h+', '+s+'%, '+l+'%)';\n    } else {\n      return '#666666';\n    }\n  }\n\n  parseGraph(data) {\n    let thisArg = this;\n\n    thisArg.panel.graph.nodes = [];\n    thisArg.panel.graph.edges = [];\n    _.forEach(data, (item) => {\n      var idx = _.findIndex(thisArg.panel.graph.nodes, node => { return item[thisArg.panel.srcNode] === node.id; });\n      if (idx == -1) {\n        var _label = (thisArg.panel.colorNode?item[thisArg.panel.colorNode]+': '+item[thisArg.panel.srcNode]:item[thisArg.panel.srcNode]);\n        thisArg.panel.graph.nodes.push({\n          id: item[thisArg.panel.srcNode],\n          label: _label,\n          x: Math.random(),\n          y: Math.random(),\n          size: parseInt(item[thisArg.panel.edgeWeight]),\n          color: thisArg.nameToColor(_label),\n        });\n        thisArg.handleThresholdColor('nodes',idx);\n      } else {\n        thisArg.panel.graph.nodes[idx].size+=parseInt(item[thisArg.panel.edgeWeight]);\n        thisArg.handleThresholdColor('nodes',idx);\n      }\n      idx = _.findIndex(thisArg.panel.graph.nodes, node => { return item[thisArg.panel.dstNode] === node.id; });\n      if (idx == -1) {\n        var _label = (thisArg.panel.colorNode?item[thisArg.panel.colorNode]+': '+item[thisArg.panel.srcNode]:item[thisArg.panel.dstNode]);\n        thisArg.panel.graph.nodes.push({\n          id: item[thisArg.panel.dstNode],\n          label: _label,\n          x: Math.random(),\n          y: Math.random(),\n          size: parseInt(item[thisArg.panel.edgeWeight]),\n          color: thisArg.nameToColor(_label),\n        });\n        thisArg.handleThresholdColor('nodes',idx);\n      } else {\n        thisArg.panel.graph.nodes[idx].size+=parseInt(item[thisArg.panel.edgeWeight]);\n        thisArg.handleThresholdColor('nodes',idx);\n      }\n      idx = _.findIndex(thisArg.panel.graph.edges, edge => { return item[thisArg.panel.srcNode]+'_'+item[thisArg.panel.dstNode] === edge.id; });\n      if (idx == -1) {\n        thisArg.panel.graph.edges.push({\n          id: item[thisArg.panel.srcNode]+'_'+item[thisArg.panel.dstNode],\n          source: item[thisArg.panel.srcNode],\n          target: item[thisArg.panel.dstNode],\n          label: (thisArg.panel.showEdgeLabels?thisArg.panel.edgeWeight+':'+parseInt(item[thisArg.panel.edgeWeight]):''),\n          size: parseInt(item[thisArg.panel.edgeWeight]),\n          type: thisArg.panel.edgeType,\n          color: '#ccc',\n          hover_color: '#000',\n        });\n        thisArg.handleThresholdColor('edges',idx);\n      } else {\n        thisArg.panel.graph.edges[idx].size+=parseInt(item[thisArg.panel.edgeWeight]);\n        if (thisArg.panel.showEdgeLabels) {\n          thisArg.panel.graph.edges[idx].label=thisArg.panel.edgeWeight+':'+thisArg.panel.graph.edges[idx].size;\n        }\n        thisArg.handleThresholdColor('edges',idx);\n      }\n    }); \n  }\n\n  handleThresholdColor(_type, _idx) {\n    if (_type === this.panel.colorMode && this.panel.thresholds.length > 0) {\n      var _fidx = _idx == -1 ? this.panel.graph[_type].length-1 : _idx;\n      var _lidx = this.panel.thresholds.findIndex((el) => {\n        return this.panel.graph[_type][_fidx].size < el;\n      });\n      _lidx = _lidx == -1 ? this.panel.thresholds.length : _lidx;\n      this.panel.graph[_type][_fidx].color = this.panel.colors[_lidx];\n    }\n  }\n\n  invertColorOrder() {\n    var ref = this.panel.colors;\n    var copy = ref[0];\n    ref[0] = ref[2];\n    ref[2] = copy;\n    this.render();\n  }\n\n  onColorChange(colorIndex) {\n    var thisArg = this;\n    return newColor => {\n      thisArg.panel.colors[colorIndex] = newColor;\n      thisArg.render();\n    };\n  }\n\n  async load_vars(el, d) {\n    var x, varlist = [''];\n    if (d.meta.id === 'elasticsearch' && typeof d.getFields === 'function') {\n      x = await d.getFields({});\n      x.forEach((it) => { varlist.push(it.text); });\n    } else if (d.meta.id === 'influxdb') {\n      // Only one measurement is allowed\n      x = await d.metricFindQuery('SHOW FIELD KEYS ON '+d.database+' FROM '+el.panel.targets[0].measurement);\n      x.forEach((it) => { varlist.push(it.text); });\n    }\n    if (!_.isEqual(varlist, el.panel.varList)) {\n      el.panel.varList = varlist;\n    }\n  }\n\n  loadTemplatingVars() {\n    let thisArg = this;\n\n    if (thisArg.panel.datasource) {\n      thisArg.datasourceSrv.get(thisArg.panel.datasource).then(\n        function(datasource) {\n          thisArg.load_vars(thisArg, datasource);\n        }.bind(thisArg),\n        function(err) {\n          console.log(err);\n        }\n      );\n    }\n  }\n}\n\nTopologyCtrl.templateUrl = 'module.html';\n"]}